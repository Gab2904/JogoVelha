class Quadrado extends React.Component {
 render (){
 return (
 <button
 className="quadrado"
 onClick={() => {this.props.onClick()}}>
 {this.props.value}
 </button>
 );
 }
}

class Jogo extends React.Component {
  constructor (props){
  super (props);
  this.state = {
    quadrados: Array(9).fill(null),
    xIsNext: true
};
}
  
  render () {
  return (
    <div className="game">
      <div className="game-board">
        <Tabuleiro quadrados={this.state.quadrados}/>
      </div>
      <div className="game-info">
        <ol>{"Movimentos"}</ol>
      </div>
    </div>
  );
  }
}


class Tabuleiro extends React.Component{
  constructor (props){
  super (props);
  this.state = {
    quadrados: Array(9).fill(null),
    xIsNext: true
};
}

  
handleClick (i){
//faz uma cópia do vetor
const quadrados = this.state.quadrados.slice();
if (calculateWinner (quadrados)){
  alert ('Jogo já acabou');
  return;
}
if (quadrados[i]){
  alert ('Quadrado ocupado!')
  return;
}
quadrados[i] = (this.state.xIsNext == true) ? 'X' : '0';
this.setState ({
quadrados: quadrados,
xIsNext: !this.state.xIsNext,
});
}
  renderizarQuadrado(i){
    return(
      <Quadrado
        value={this.state.quadrados[i]}
        onClick={() => this.handleClick(i)}
        />
    );
  }
  
  jogarSozinho = () => {
    let i = Math.floor(Math.random() * 9) + 1;
    alert(i);
    const quadrados = this.state.quadrados.slice();
    let ocupado = true;
    while(ocupado == true){
      if (!quadrados[i]){
        ocupado = false;
      }else{
        i = Math.floor(Math.random() * 9) + 1;
      }
      
    }
    
    if (calculateWinner (quadrados)){
      alert ('Jogo já acabou');
      return;
    }
    
    quadrados[i] = this.state.xIsNext ? 'X' : '0';
    
    this.setState ({
      quadrados: quadrados,
      xIsNext: !this.state.xIsNext,
    });
    
  }
  
  resetar = () => {
    this.setState ({
      quadrados: Array(9).fill(null),
      xIsNext: true
    });
  }
  
  
  render (){
    const vencedor = calculateWinner (this.state.quadrados);
    let status;
    if (vencedor){
      status = 'Vencedor: ' + vencedor;
    }else{
      status = 'Jogador: ' + (this.state.xIsNext ? 'X' : 'O');
    }
    
    return (
      <div>
        <button onClick={() => {this.resetar()}} className="btnResetar">Resetar</button>
        <button onClick={() => {this.jogarSozinho()}} className="btnResetar">Joga sozinho</button>
      <div className="status">{status}</div>
        <div className="board-row">
          {this.renderizarQuadrado(0)}
          {this.renderizarQuadrado(1)}
          {this.renderizarQuadrado(2)}
        </div>
        <div className="board-row">
          {this.renderizarQuadrado(3)}
          {this.renderizarQuadrado(4)}
          {this.renderizarQuadrado(5)}
        </div>
        <div className="board-row">
          {this.renderizarQuadrado(6)}
          {this.renderizarQuadrado(7)}
          {this.renderizarQuadrado(8)}
        </div>
      </div>
  );
}
}

function calculateWinner(squares) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ];
  
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return squares[a];
    }
  }
  return null;
 }

ReactDOM.render (
  <Jogo />,
  document.getElementById("root")
);

// ReactDOM.render(
//   <Quadrado onClick={
//       () =>{
//         alert('Clicou!')
//       }
//     }
//     value={2+2}
//     />,
  
//   document.getElementById ("root")
// );